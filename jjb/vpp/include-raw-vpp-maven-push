#!/usr/bin/perl -wT

print(
     "\n",
     "######################################################################\n",
     "    Push to Nexus via Maven\n",
     "######################################################################\n"
);

use strict;

use File::Find;
use Carp;
use IPC::Cmd qw(run);
use Sys::Syslog qw(:macros :standard);

$SIG{CHLD} = 'DEFAULT';
my $DEBUG = 1;

openlog( 'zephyr-maven-push', 'nofatal,perror', LOG_LOCAL0 );
setlogmask( LOG_UPTO( LOG_DEBUG ) );

my %input = (

  # example: /etc/maven/settings.xml
  global_settings => { ENV_KEY => 'GLOBAL_SETTINGS_FILE',
                       rx      => qr{^(/.+)$},
                       label   => 'Global Settings File',
                       default => '/etc/maven/settings.xml',
  },

  # example: /etc/maven/settings.xml
  global_settings => { ENV_KEY => 'GLOBAL_SETTINGS_FILE',
                       rx      => qr{^(/.+)$},
                       label   => 'Global Settings File',
                       default => '/etc/maven/settings.xml',
  },

  # example:  https://nexus.fd.io
  nexus_proxy => { ENV_KEY => 'NEXUSPROXY',
                   rx      => qr{^(https?://[^/]+)$},
                   label   => 'Nexus Proxy',
                   default => 'http://nexus.fd.io',
  },

  # example: Maven_3.0.4
  maven_selector => { ENV_KEY => 'MAVEN_SELECTOR',
                      rx      => qr{^(Maven_\d+\.\d+\.\d+)$},
                      label   => 'Maven selector',
                      default => 'Maven_3.0.4',
  },

  # example: ~/.m2/settings.xml
  settings => { ENV_KEY => 'SETTINGS_FILE',
                rx      => qr{^(/.+)$},
                label   => 'Settings File',
                default => qq{$ENV{HOME}/.m2/settings.xml},
  },

  # example: /jenkins
  home => { ENV_KEY => 'HOME',
            rx      => qr{^(/.+)$},
            label   => 'Home Directory',
            default => $ENV{HOME}
  },

  # example: vpp
  project => { ENV_KEY => 'PROJECT',
               rx      => qr{^(\S+)$},
               label   => 'Project',
               default => 'vpp',
  },

  # os: ubuntu1404
  os => { ENV_KEY => 'OS',
          rx      => qr{^(\S+)$},
          label   => 'OS',
          default => 'ubuntu1404',
  },

  # gerrit_branch: master
  gerrit_branch => { ENV_KEY => 'GERRIT_BRANCH',
                     rx      => qr{^(\S+)$},
                     label   => 'Branch',
                     default => 'master',
  },

);

# Input validation
foreach my $field ( values %input ) {
  my $key = $field->{ENV_KEY};
  $ENV{$key} = $field->{default}
    unless exists $ENV{$key};
  ( $field->{validated} ) = ( $ENV{$key} =~ $field->{rx} )
    or error( 'ERROR: Invalid [%s] environment variable!', $key );
}

# Determine the path to maven
my $mvn = join( '',
                $input{home}->{validated},
                qq{/tools/hudson.tasks.Maven_MavenInstallation/},
                $input{maven_selector}->{validated},
                q{/bin/mvn} );

error( "ERROR: Maven install [\%s] not detected at \n$mvn",
       $input{maven_selector}->{validated} )
  unless -f $mvn && -x $mvn;

my $os = $input{os}->{validated};

my $prj     = 'fd.io';
my $groupId = qq{io.fd.$input{project}->{validated}};
my $baseurl = "$input{nexus_proxy}->{validated}/content/repositories/$prj.";

my $lsb_release = {
                    ubuntu1404 => { "Distributor ID" => "Ubuntu",
                                    "Description"    => "Ubuntu 14.04.2 LTS",
                                    "Release"        => "14.04",
                                    "Codename"       => "trusty"
                    },
                    ubuntu1604 => { "Distributor ID" => "Ubuntu",
                                    "Description"    => "Ubuntu 16.04 LTS",
                                    "Release"        => "16.04",
                                    "Codename"       => "xenial"
                    },
                    centos7 => { "Distributor ID" => "CentOS",
                                 "Description"    => "CentOS 7",
                                 "Release"        => "7",
                    }, };

my $dist = lc $lsb_release->{$os}->{'Distributor ID'};
( my ( $rel ) = $lsb_release->{$os}->{Release} ) =~ s/\.//g;
my @br = split( m:/:, $input{gerrit_branch}->{validated} );
my @release = $lsb_release->{$os}->{Codename} ) // ();

if ( @release ) {

    # Ubuntu 14.04 becomes ubuntu.trusty
    unshift @release, $dist;
} else {

    # "CentOS 7" becomes "centos7"
    ( my $desc = $lsb_release->{$os}->{Description} ) =~ s/\s*//g;
    push( @release, lc $desc );
}

my @tail = @br, @release, 'main';

my $repo_id  = join( '.', $prj,     @tail );
my $repo_url = join( '.', $baseurl, @tail );

# example: zephyr-kernel-1.0.0-160210-c12c48c.tar.gz

find( { untaint => 1,
        wanted  => \&push_deb,
  },
      '.' );

sub push_deb {
    return unless /(\.deb|\.dsc|\.build|\.changes|\.tar\.[^.]$)/;
    print "processing file $_\n";

    push_file( file         => $File::Find::name,
               repositoryId => $repo_id,
               url          => $repo_url,
               groupId      => $groupId,
               version      => $version,
               artifactId   => $artifactId,
               type         => $type );
}

sub push_rpm {
    return unless /(\.s(:?rc)?rpm/;
    print "processing file $_\n";

    push_file( file         => $File::Find::name,
               repositoryId => $repo_id,
               url          => $repo_url,
               groupId      => $groupId,
               version      => $version,
               artifactId   => $artifactId,
               type         => $type );
}


sub usage {
    my $msg = join( "\n",
      q{ This script expects a number of environment variables to be set },
      q{It is run on a Jenkins machine and expects maven is installed as},
q{ $HOME/tools/hudson.tasks.Maven_MavenInstallation/$MAVEN_SELECTOR/bin/mvn },
      qq{GLOBAL_SETTINGS_FILE="/etc/maven/settings.xml"},
      qq{NEXUSPROXY='http://nexus.fd.io'},
      qq{MAVEN_SELECTOR='Maven_3.3.42'},
      qq{SETTINGS_FILE="~/.m2/settings.xml"},
      qq{HOME='/home/cjac'},
      qq{PROJECT='fd.io'}, );
    die $msg;
}

sub error {
    my ( $fmt, @arg ) = @_;
    syslog( LOG_ERR, $fmt, @arg );
    confess sprintf( $fmt, @arg );
}

sub push_file {
    my %arg = @_;

    my @required = qw( file repositoryId url groupId version artifactId type );

    foreach my $required ( @required ) {
      next if exists $arg{$required} && defined $arg{$required};

      error( 'Required argument [%s] was not specified in call to push_file',
             $required );
    }

    my $cmd = [ $mvn,
                'org.apache.maven.plugins:maven-deploy-plugin:deploy-file',
                ( map { "-D${_}=$arg{$_}" } keys %arg ),
                "-gs $input{global_settings}->{validated}",
                "-s $input{settings}->{validated}", ];

    my ( $success, $error_message, $full_buf, $stdout_buf, $stderr_buf ) =
      run( command => $cmd,
           verbose => 0 );

    unless ( $success ) {
      my $exception = $@;
      my $errstr    = $!;
      print( "=====\n",
             "STDOUT: [ @$stdout_buf ]\n",
             "STDERR: [ @$stderr_buf ]\n",
             "full output: [ @$full_buf ]\n",
             "error message: [ $error_message ]\n",
             "exception: [ $@ ]\n",
             "errstr: [ $! ]\n",
             "=====\n"
      ) if $DEBUG;

      error( 'Error executing maven [%s]', "@$cmd" );
    }
}

# vim: ts=4 sw=4 sts=4 et ft=sh :
