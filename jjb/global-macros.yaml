---
# Global macros

# vim: sw=2 ts=2 sts=2 et :

# BUILDERS
- builder:
    name: ci-management-check-unicode
    builders:
      - shell: |
          $WORKSPACE/scripts/check-unicode.sh jjb/

- builder:
    name: provide-maven-settings
    builders:
      - config-file-provider:
          files:
            - file-id: '{global-settings-file}'
              variable: 'GLOBAL_SETTINGS_FILE'
            - file-id: '{settings-file}'
              variable: 'SETTINGS_FILE'

# call maven-target builder with a goal of --version to force Jenkins to
# install the needed maven version
- builder:
    name: maven-install
    builders:
      - maven-target:
          maven-version: '{maven-version}'
          goals: '--version'

- builder:
    name: packer-validate
    builders:
      - config-file-provider:
          files:
            - file-id: 'packer-cloud-env'
              variable: 'CLOUDENV'
      # yamllint disable rule:line-length
      - shell: |
          #!/bin/bash
            cd packer
            varfiles="../packer/vars/*"
            templates="../packer/templates/*"
            provision="../packer/provision/*.sh"
            for v in $varfiles; do
                [[ "${v##*/}" =~ ^(cloud-env.*)$ ]] && continue
                for t in $templates; do
                    export PACKER_LOG="yes" && \
                    export PACKER_LOG_PATH="packer-validate-${v##*/}-${t##*/}.log" && \
                            packer.io validate -var-file=$CLOUDENV \
                            -var-file=$v $t
                    if [ $? -ne 0 ]; then
                        break
                    fi
                done
            done
            for p in $provision; do
                /bin/bash -n $p > provision-validate-${p##*/}.log 2>&1
                if [ $? -ne 0 ]; then
                    break
                fi
            done
      # yamllint enable

- builder:
    name: packer-build
    builders:
      - config-file-provider:
          files:
            - file-id: 'packer-cloud-env'
              variable: 'CLOUDENV'
      - shell: |
          #!/bin/bash
          cd packer
          export PACKER_LOG="yes" && \
          export PACKER_LOG_PATH="packer-build.log" && \
              packer.io build -var-file=$CLOUDENV \
              -var-file=../packer/vars/{platform}.json \
              ../packer/templates/{template}.json

# PARAMETERS
#
# Review ARCHIVE_ARTIFACTS
#
- parameter:
    name: fdio-infra-parameters
    parameters:
      - string:
          name: PROJECT
          default: '{project}'
          # yamllint disable rule:line-length
          description: 'JJB configured PROJECT parameter to identify a Gerrit project'
          # yamllint enable
      - string:
          name: ARCHIVE_ARTIFACTS
          default: '{artifacts} **/target/surefire-reports/*-output.txt'
          # yamllint disable rule:line-length
          description: 'Space separated glob patterns for artifacts to archive to logs hosting'
          # yamllint enable
      - string:
          name: GERRIT_BRANCH
          default: '{branch}'
          description: 'JJB configured GERRIT_BRANCH parameter'
      - string:
          name: GERRIT_PROJECT
          default: '{project}'
          description: 'GERRIT_PROJECT parameter if not given by trigger'
      - string:
          name: GERRIT_REFSPEC
          default: '{refspec}'
          description: 'GERRIT_REFSPEC parameter if not given by trigger'
      - string:
          name: OS
          default: '{os}'
          description: 'JJB configured OS parameter to identify the OS'
      - string:
          name: STREAM
          default: '{stream}'
          description: 'Stream job parameter to be used in shell scripts.'

- parameter:
    name: maven-exec
    parameters:
      - string:
          name: MVN
          # yamllint disable rule:line-length
          default: '/w/tools/hudson.tasks.Maven_MavenInstallation/{maven-version}/bin/mvn'
          # yamllint enable
          description: 'Maven selector to be used by shell scripts'

- parameter:
    name: maven-project-parameter
    parameters:
      - string:
          name: MAVEN_SELECTOR
          default: '{maven}'
          description: 'Maven selector to be used by shell scripts'

- parameter:
    name: repo-name-parameter
    parameters:
      - string:
          name: REPO_NAME
          default: '{repo-name}'
          description: 'Name of repo to which to publish packaging'

- parameter:
    name: compiler-parameter
    parameters:
      - string:
          name: CC
          default: '{cc}'
          description: "CC parameter, can be gnu or clang"

- parameter:
    name: is-csit-vpp-job-parameter
    parameters:
      - string:
          name: IS_CSIT_VPP_JOB
          default: '{is-csit-vpp-job}'
          description: "Parameter is True if this is a CSIT vpp job."

# PROPERTIES
- property:
    name: fdio-infra-properties
    properties:
      - build-discarder:
          days-to-keep: '{build-days-to-keep}'
          num-to-keep: 40
          artifact-days-to-keep: -1
          artifact-num-to-keep: 5

# PUBLISHERS
- publisher:
    name: archive-artifacts
    publishers:
      - archive:
          artifacts: '{artifacts}'
          allow-empty: true
          fingerprint: true
          latest-only: true

- publisher:
    name: email-notification
    publishers:
      - email-ext:
          recipients: 'nobody@projectrotterdam.info'
          reply-to:
          content-type: default
          # yamllint disable rule:line-length
          subject: '{email-prefix} $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!'
          # yamllint enable
          body: |
            $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS:

            Check console output at $BUILD_URL to view the results.
          unstable: true
          fixed: true
          send-to:
            - developers
            - recipients

- publisher:
    name: jacoco-report
    publishers:
      - jacoco:
          exec-pattern: '**/**.exec'
          class-pattern: '**/classes'
          source-pattern: '**/src/main/java'
          # yamllint disable rule:line-length
          exclusion-pattern: '**/gen**,**/generated-sources/**,**/yang-gen**,**/pax/**'
          # yamllint enable
          status-update: true
          targets:
            - branch:
                healthy: 10
                unhealthy: 20
            - method:
                healthy: 50
                unhealthy: 40

- publisher:
    name: robot-report
    publishers:
      - robot:
          output-path: '{output-path}'
          other-files: ''

- publisher:
    name: fdio-infra-shiplogs
    # To archive things, the job will need to create an "archives" directory in
    # the workspace and this macro will handle copying the contents of the
    # archives directory.
    #
    # Uses the build parameter ARCHIVE_ARTIFACTS if not empty to find files to
    # archive. You can pass globstar patterns for example "**/*.xml **/*.log" as
    # the archive pattern. This is a space separated list of files to archive.
    #
    # Also ensure that the workspace is cleaned up at the end of the build.
    publishers:
      - postbuildscript:
          builders:
            - shell: !include-raw: include-raw-deploy-archives.sh
            - maven-target:
                maven-version: '{maven-version}'
                pom: '.archives/deploy-archives.xml'
                goals: 'clean deploy -V -B -q -Dmaven.repo.local=/tmp/r'
                settings: 'jenkins-log-archives-settings'
                settings-type: cfp
                global-settings: 'global-settings'
                global-settings-type: cfp
            - description-setter:
                regexp: '^Build logs: .*'
          script-only-if-succeeded: false
          script-only-if-failed: false
          mark-unstable-if-failed: true
      - workspace-cleanup:
          fail-build: false`

# SCMS
- scm:
    name: git-scm
    scm:
      - git:
          credentials-id: '{credentials-id}'
          url: '$GIT_BASE'
          refspec: ''
          branches:
            - 'origin/{branch}'
          skip-tag: true
          wipe-workspace: true
          timeout: 30

- scm:
    name: gerrit-trigger-scm
    scm:
      - git:
          credentials-id: '{credentials-id}'
          url: '$GIT_BASE'
          refspec: '{refspec}'
          branches:
            - 'origin/$GERRIT_BRANCH'
          skip-tag: true
          timeout: 30
          choosing-strategy: '{choosing-strategy}'

# TRIGGERS

# This is a single macro to use for all jobs who vote on every (relevant) patch
# set. Only 'recheck' trigger word is supported, it always triggers the full set
# of relevant jobs, in order to prevent Jenkins from starting only a subset and
# still voting Verified+1
# Arguments:
#     server: name of gerrit server to listen to
#     project: pattern to match triggering projects
#     branch: triggering branch name
#     files: pattern to match triggering filepaths
- trigger:
    name: gerrit-trigger-patch-submitted
    triggers:
      - gerrit:
          server-name: '{server}'
          trigger-on:
            - patchset-created-event:
                exclude-drafts: 'false'
                exclude-trivial-rebase: 'false'
                exclude-no-code-change: 'false'
            - draft-published-event
            - comment-added-contains-event:
                comment-contains-value: 'recheck'
            - comment-added-contains-event:
                comment-contains-value: 'reverify'
          projects:
            - project-compare-type: 'ANT'
              project-pattern: '{project}'
              branches:
                - branch-compare-type: 'ANT'
                  branch-pattern: '**/{branch}'
              file-paths:
                - compare-type: 'ANT'
                  pattern: '{files}'

- trigger:
    name: gerrit-trigger-patch-merged
    triggers:
      - gerrit:
          server-name: '{server}'
          trigger-on:
            - change-merged-event
            - comment-added-contains-event:
                comment-contains-value: 'remerge'
          projects:
            - project-compare-type: 'ANT'
              project-pattern: '{project}'
              branches:
                - branch-compare-type: 'ANT'
                  branch-pattern: '**/{branch}'
              file-paths:
                - compare-type: 'ANT'
                  pattern: '{files}'
          # Force Jenkins always vote the values it should already have voted
          # during the prior verify phase
          override-votes: true
          gerrit-build-started-verified-value: 1
          gerrit-build-successful-verified-value: 1
          gerrit-build-failed-verified-value: 1
          gerrit-build-unstable-verified-value: 1
          gerrit-build-notbuilt-verified-value: 1
          gerrit-build-started-codereview-value: 0
          gerrit-build-successful-codereview-value: 0
          gerrit-build-failed-codereview-value: 0
          gerrit-build-unstable-codereview-value: 0
          gerrit-build-notbuilt-codereview-value: 0

- trigger:
    name: gerrit-trigger-manually-triggered
    triggers:
      - gerrit:
          server-name: 'Primary'
          trigger-on:
            - comment-added-contains-event:
                comment-contains-value: '{comment-trigger-value}'
          projects:
            - project-compare-type: 'ANT'
              project-pattern: '{name}'
              branches:
                - branch-compare-type: 'ANT'
                  branch-pattern: '**/{branch}'

# WRAPPERS
- wrapper:
    name: build-timeout
    wrappers:
      - timeout:
          type: absolute
          timeout: 360
          fail: true

- wrapper:
    # This wrapper is required for all jobs as it configures the wrappers
    # needed by the FD.io infra.
    name: fdio-infra-wrappers
    wrappers:
      - timeout:
          type: absolute
          timeout: '{build-timeout}'
          timeout-var: 'BUILD_TIMEOUT'
          fail: true
      - ssh-agent-credentials:
          users:
            - 'jenkins-gerrit-credentials'
      - openstack:
          single-use: true

- wrapper:
    # This wrapper can be used for all jobs that reuire no-activity timeouts
    name: fdio-infra-wrappers-non-activity-timeout
    wrappers:
      - timeout:
          type: no-activity
          timeout: '{build-timeout}'
          fail: true
      - ssh-agent-credentials:
          users:
            - 'jenkins-gerrit-credentials'
      - openstack:
          single-use: True
